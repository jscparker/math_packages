
-------------------------------------------------------------------------------
-- package body Disorderly.Random.Clock_Entropy, Random Number Initialization
-- Copyright (C) 1995-2018 Jonathan S. Parker
--
-- Permission to use, copy, modify, and/or distribute this software for any
-- purpose with or without fee is hereby granted, provided that the above
-- copyright notice and this permission notice appear in all copies.
-- THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
-- WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
-- MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
-- ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
-- WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
-- ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
-- OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
-------------------------------------------------------------------------------

with Ada.Calendar;
with System;        -- for Tick : Duration;

package body Disorderly.Random.Clock_Entropy is

  -------------------------
  -- Get_Seed_From_Clock --
  -------------------------

  -- Clock sets initial seed.  
  -- Seconds (T) is <= 86_400.0.
  -- Day (T) is <= 31.0.
  --
  procedure Get_Seed_From_Clock
    (Initiator : out Seed_Random_Int)
  is
     type Real is digits 15;
     Fake_Ticks_per_Second : constant Real := 77_777_777.0;
     Seconds_per_Day       : constant Real := 86_400.0;
     Fake_Ticks_per_Day    : constant Real := Fake_Ticks_per_Second * Seconds_per_Day;
     Min_Delay             : constant Duration := System.Tick;
     T : Ada.Calendar.Time;
     Seed : Parent_Random_Int;
  begin
  
     delay  Min_Delay * 3.0;

     T := Ada.Calendar.Clock;

     Seed := Random_Int (Real (Ada.Calendar.Seconds (T)) * Fake_Ticks_per_Second +
                         Real (Ada.Calendar.Day (T))     * Fake_Ticks_per_Day);
     --  So Seed is the number of elapsed fake ticks in present month.
     --
     --  Even if Seconds (T) = 0.0000123 we want 
     --  Seconds (T)) * Fake_Ticks_per_Second to be big integer, so make 
     --  Fake_Ticks_per_Second very large. 
     --
     --  Max val of Seed  ~ 0.83 * 2^51.

     Initiator := Seed + 777_777;  -- 0 < Seed <= Random_Int'Last

     delay Min_Delay * (7.0 + Duration (Initiator mod 77));
     --  Minimize likelihood that next call to Reset_with_Calendar produces
     --  the same Initiator1, and hence the same state S.
     --  Doesn't guarantee that there is no relationship between successive 
     --  seeds, but such a relationship would be difficult to see.
     --  All we need is 1 bit of difference between the outputs of two
     --  successive calls to Ada.Calendar.Clock, and the two 256 bit
     --  states generated by the successive calls will have no apparent
     --  similarities.

  end Get_Seed_From_Clock;

  -----------
  -- Reset --
  -----------

  procedure Reset
    (S : out State)
  is
     Initiator1, Initiator2 : Seed_Random_Int;
  begin
  
     Get_Seed_From_Clock (Initiator1);
     Get_Seed_From_Clock (Initiator2);
     Disorderly.Random.Reset (S, Initiator1, Initiator2);

  end Reset;

end Disorderly.Random.Clock_Entropy;

