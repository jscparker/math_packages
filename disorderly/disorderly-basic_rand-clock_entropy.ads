
-------------------------------------------------------------------------------
-- package Disorderly.Basic_Rand.Clock_Entropy, Random Number Initialization
-- Copyright (C) 1995-2018 Jonathan S. Parker
--
-- Permission to use, copy, modify, and/or distribute this software for any
-- purpose with or without fee is hereby granted, provided that the above
-- copyright notice and this permission notice appear in all copies.
-- THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
-- WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
-- MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
-- ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
-- WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
-- ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
-- OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
-------------------------------------------------------------------------------

-- PACKAGE Disorderly.Basic_Rand.Clock_Entropy
--
-- Clock provides a few bits of entropy to help find a unique initial seed.
--
-- Calendar.Clock is used here by procedure Reset to help choose the initial 
-- State, S, for calls to the random number generator, Get_Rand.
--
-- Want Disorderly.Basic_Rand to be a Pure package, and thread-safe, but
-- Package Calendar is not pure. That is why the Calendar based
-- Reset is placed here, a child package of Disorderly.Basic_Rand.
--

package Disorderly.Basic_Rand.Clock_Entropy is


   procedure Reset (S : out State);
   --  procedure Reset_with_Calendar initializes State S.
   --  It calls Calendar (along with 2 calls to the delay statement) in
   --  an attempt to get a unique State each time Reset is called.
   --
   --  All we need is 1 bit of difference between the outputs of two
   --  successive calls to Ada.Calendar.Clock, and the two 256 bit
   --  states generated by the successive calls will have no apparent
   --  similarities.  (Not remotely good enough for cryptography, but
   --  very useful for Monte-Carlo applications.)

end Disorderly.Basic_Rand.Clock_Entropy;

