
--
--  The following uses 32+ decimal digit rational polynomial 
--  approximations of the log_gamma function on [1,3], derived 
--  from John Maddock's extended precision
--  (Boost Library) gamma function, so let's use the Boost License.
--  Many thanks are due to John Maddock.

-------------------------------------------------------------------------- 
--(C) Copyright John Maddock 2006.
--Use, modification and distribution are subject to the
--Boost Software License, Version 1.0. (See accompanying file
--LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
--
--Boost Software License - Version 1.0 - August 17th, 2003
--
--Permission is hereby granted, free of charge, to any person or organization
--obtaining a copy of the software and accompanying documentation covered by
--this license (the "Software") to use, reproduce, display, distribute,
--execute, and transmit the Software, and to prepare derivative works of the
--Software, and to permit third-parties to whom the Software is furnished to
--do so, all subject to the following:
--
--The copyright notices in the Software and this entire statement, including
--the above license grant, this restriction and the following disclaimer,
--must be included in all copies of the Software, in whole or in part, and
--all derivative works of the Software, unless such copies or derivative
--works are solely in the form of machine-executable object code generated by
--a source language processor.
--
--THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
--SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
--FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
--ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
--DEALINGS IN THE SOFTWARE.
-------------------------------------------------------------------------- 

package body Gamma_1_to_3 is

  Zero  : constant Real := +0.0;
  One   : constant Real := +1.0;
  Two   : constant Real := +2.0;
  Three : constant Real := +3.0;

  -----------------------
  -- Log_Gamma_1_to_3  --
  -----------------------

  -- Rational poly coefficients.

  type Remez_Coeff_Range is range 1..13;

  type Remez_Rational_Poly is array(Remez_Coeff_Range) of Real;

  Y_1_to_1pt35 : constant Real := +0.54076099395751953125;

  Numerator_Log_Gamma_1_to_1pt35 : constant Remez_Rational_Poly :=
    (
     0.036454670944013329356512090082402429697,
    -0.066235835556476033710068679907798799959,
    -0.67492399795577182387312206593595565371,
    -1.4345555263962411429855341651960000166,
    -1.4894319559821365820516771951249649563,
    -0.87210277668067964629483299712322411566,
    -0.29602090537771744401524080430529369136,
    -0.0561832587517836908929331992218879676,
    -0.0053236785487328044334381502530383140443,
    -0.00018629360291358130461736386077971890789,
    -0.10164985672213178500790406939467614498e-6,
     0.13680157145361387405588201461036338274e-8,
     0.0
    );

  Denominator_Log_Gamma_1_to_1pt35 : constant Remez_Rational_Poly :=
    (
     1.0,
     4.9106336261005990534095838574132225599,
     10.258804800866438510889341082793078432,
     11.88588976846826108836629960537466889,
     8.3455000546999704314454891036700998428,
     3.6428823682421746343233362007194282703,
     0.97465989807254572142266753052776132252,
     0.15121052897097822172763084966793352524,
     0.012017363555383555123769849654484594893,
     0.0003583032812720649835431669893011257277,
     0.0,
     0.0,
     0.0
    );


  Y_1pt35_to_1pt625 : constant Real := +0.483787059783935546875;

  Numerator_Log_Gamma_1pt35_to_1pt625 : constant Remez_Rational_Poly :=
   (
    -0.017977422421608624353488126610933005432,
     0.18484528905298309555089509029244135703,
    -0.40401251514859546989565001431430884082,
     0.40277179799147356461954182877921388182,
    -0.21993421441282936476709677700477598816,
     0.069595742223850248095697771331107571011,
    -0.012681481427699686635516772923547347328,
     0.0012489322866834830413292771335113136034,
    -0.57058739515423112045108068834668269608e-4,
     0.8207548771933585614380644961342925976e-6,
     0.0,
     0.0,
     0.0
   );

  Denominator_Log_Gamma_1pt35_to_1pt625 : constant Remez_Rational_Poly :=
   (
     1.0,
    -2.9629552288944259229543137757200262073,
     3.7118380799042118987185957298964772755,
    -2.5569815272165399297600586376727357187,
     1.0546764918220835097855665680632153367,
    -0.26574021300894401276478730940980810831,
     0.03996289731752081380552901986471233462,
    -0.0033398680924544836817826046380586480873,
     0.00013288854760548251757651556792598235735,
    -0.17194794958274081373243161848194745111e-5,
     0.0,
     0.0,
     0.0
   );

  Y_1pt625_to_2 : constant Real := +0.443811893463134765625;

  Numerator_Log_Gamma_1pt625_to_2 : constant Remez_Rational_Poly :=
   (
    -0.021027558364667626231512090082402429494,
     0.15128811104498736604523586803722368377,
    -0.26249631480066246699388544451126410278,
     0.21148748610533489823742352180628489742,
    -0.093964130697489071999873506148104370633,
     0.024292059227009051652542804957550866827,
    -0.0036284453226534839926304745756906117066,
     0.0002939230129315195346843036254392485984,
    -0.11088589183158123733132268042570710338e-4,
     0.13240510580220763969511741896361984162e-6,
     0.0,
     0.0,
     0.0
   );

  Denominator_Log_Gamma_1pt625_to_2 : constant Remez_Rational_Poly :=
    (
     1.0,
    -2.4240003754444040525462170802796471996,
     2.4868383476933178722203278602342786002,
    -1.4047068395206343375520721509193698547,
     0.47583809087867443858344765659065773369,
    -0.09865724264554556400463655444270700132,
     0.012238223514176587501074150988445109735,
    -0.00084625068418239194670614419707491797097,
     0.2796574430456237061420839429225710602e-4,
    -0.30202973883316730694433702165188835331e-6,
     0.0,
     0.0,
     0.0
    );

  Y_2_to_3 : constant Real := +0.158963680267333984375;

  Numerator_Log_Gamma_2_to_3 : constant Remez_Rational_Poly :=
   (
    -0.018035568567844937910504030027467476655,
     0.013841458273109517271750705401202404195,
     0.062031842739486600078866923383017722399,
     0.052518418329052161202007865149435256093,
     0.01881718142472784129191838493267755758,
     0.0025104830367021839316463675028524702846,
    -0.00021043176101831873281848891452678568311,
    -0.00010249622350908722793327719494037981166,
    -0.11381479670982006841716879074288176994e-4,
    -0.49999811718089980992888533630523892389e-6,
    -0.70529798686542184668416911331718963364e-8,
     0.0,
     0.0
  );

  Denominator_Log_Gamma_2_to_3 : constant Remez_Rational_Poly :=
    (
     1.0,
     2.5877485070422317542808137697939233685,
     2.8797959228352591788629602533153837126,
     1.8030885955284082026405495275461180977,
     0.69774331297747390169238306148355428436,
     0.17261566063277623942044077039756583802,
     0.02729301254544230229429621192443000121,
     0.0026776425891195270663133581960016620433,
     0.00015244249160486584591370355730402168106,
     0.43997034032479866020546814475414346627e-5,
     0.46295080708455613044541885534408170934e-7,
    -0.93326638207459533682980757982834180952e-11,
     0.42316456553164995177177407325292867513e-13
    );


  function Log_Gamma_1_to_3 
   (x : in Real) return Real
  is
    Result, Arg : Real := Zero;
    R, c : Real;

    -- Evaluate P(n) x^n  +  P(n-1) x^(n-1)  +  ...  +  P(0):

    function Remez_Poly_Sum
     (x : in Real;
      P : Remez_Rational_Poly) return Real
    is
      Sum : Real := Zero;
    begin
      for j in reverse Remez_Coeff_Range loop
        Sum := Sum * x + P(j);
      end loop;
      return Sum;
    end Remez_Poly_Sum;

  begin

    if x > Three then
      raise Constraint_Error;
    end if;

    if x >= Two then

       -- x in [2,3):

       -- Log_Gamma(x) := (x-2)(x+1)(Y + R(x-2))

       Arg := x - Two;
       R := Remez_Poly_Sum (Arg, Numerator_Log_Gamma_2_to_3) /
            Remez_Poly_Sum (Arg, Denominator_Log_Gamma_2_to_3);

       c := Arg * (x + One);

       Result :=  c * Y_2_to_3 + c * R;

    elsif x > (+1.625) then

       -- x in (1.625, 2.0]:

       -- Log_Gamma(z) := (2-x)(1-x)(Y + R(2-x))

       Arg := Two - x;

       R := Remez_Poly_Sum (Arg, Numerator_Log_Gamma_1pt625_to_2) /
            Remez_Poly_Sum (Arg, Denominator_Log_Gamma_1pt625_to_2);

       c := Arg * (One - x);

       Result := c * Y_1pt625_to_2 + c * R;

    elsif x > (+1.35) then

       -- x in (1.35, 1.625]:

       -- Log_Gamma(x) := (x-1)(x-2)(Y + R(1.625 - x))

       Arg := +1.625 - x;

       R := Remez_Poly_Sum (Arg, Numerator_Log_Gamma_1pt35_to_1pt625) /
            Remez_Poly_Sum (Arg, Denominator_Log_Gamma_1pt35_to_1pt625);

       c := (x - One) * (x - Two);

       Result := c * Y_1pt35_to_1pt625 + c * R;

    elsif x >= One then

       -- x in [1,1.35]:

       -- Log_Gamma(x) := (x-1)(x-2)(Y + R(x-1))

       Arg := x - One;

       R := Remez_Poly_Sum (Arg, Numerator_Log_Gamma_1_to_1pt35) /
            Remez_Poly_Sum (Arg, Denominator_Log_Gamma_1_to_1pt35);

       c := Arg * (x - Two);

       Result := c * Y_1_to_1pt35 + c * R;

    else
       raise Constraint_Error;  -- or Argument_Error?
    end if;

    return Result;

  end Log_Gamma_1_to_3;

end Gamma_1_to_3;

